repositories {
	maven {
		// Our Maven repo URL (it can end with "release" or "canary")
		url "https://raw.github.com/hipsheep/volley-wrapper-distribution/canary"
	}
}

apply plugin: 'com.android.library'

android {
	compileSdkVersion 25
	buildToolsVersion "25.0.3"

	defaultConfig {
		minSdkVersion 9
		targetSdkVersion 25

		versionCode 10001
		versionName "1.0.1"

		// Set AndroidJUnitRunner as the default test instrumentation runner, to use JUnit 4 test classes
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	lintOptions {
		abortOnError false
	}
}

// After the build finishes, create Javadoc and group release files on the "build" dir
build.finalizedBy('createJavadocJar', 'groupReleaseFiles')

task createJavadoc(type: Javadoc) {
	description('Creates the javadoc HTML files for all the library classes.')

	source = ["src/main/java"]

	failOnError false

	def androidJar = android.sdkDirectory.toString() + "/platforms/" + android.compileSdkVersion + "/android.jar"
	classpath = files(android.libraryVariants.release.javaCompile.classpath.files, androidJar)

	options {
		links "http://docs.oracle.com/javase/7/docs/api/"
		linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
	}

	exclude '**/BuildConfig.java'
	exclude '**/R.java'
}

task createJavadocJar(type: Jar, dependsOn: 'createJavadoc') {
	description('Creates the javadoc jar for all the library classes.')

	classifier = 'javadoc'
	from 'build/docs/javadoc/'
}

// Task that copies the .aar and .jar files to the root of the "build" dir and renames them, to have
// them ready to upload to Maven
task groupReleaseFiles(type: Copy) {
	description('Copies the assembled .jar and .aar files to the root of the "build" folder and renames them using the current version.')

	def libVersion = android.defaultConfig.versionName

	// Copy and rename aar file
	from('build/outputs/aar/') {
		include '*-release.aar'
		rename '-release.aar', '-' + libVersion + '.aar'
	}

	// Copy and rename javadoc jar file
	from('build/libs/') {
		include '*.jar'
		rename 'volleywrapper', 'volleywrapper-' + libVersion
	}

	into 'build'
}

// Task that returns the current library version, needed to publish the aar to Maven
task getVersion << {
	println android.defaultConfig.versionName
}

def volleyVersion = '1.0.0'

// Task that returns the current version of Volley being used, needed to publish the aar to Maven
task getVolleyVersion << {
	println volleyVersion
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])

	// Include Volley library from our Maven repository
	compile 'com.android.volley:volley:' + volleyVersion

	// The Gson library is used to easily parse JSON objects
	compile 'com.google.code.gson:gson:2.7'

	testCompile 'junit:junit:4.12'

	// Instrumentation test libraries

	androidTestCompile 'com.android.support:support-annotations:25.3.1'

	androidTestCompile 'com.android.support.test:runner:0.5'
	androidTestCompile 'com.android.support.test:rules:0.5'

	androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}